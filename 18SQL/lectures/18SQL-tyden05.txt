-- cd C:\spravny_adresar\_Firebird2.5_
-- isql -u sysdba -p masterkey -ch DOS852

CONNECT 'hry.fdb';

-- nastaveni "isql", aby nezobrazoval siroke nazvy nekterych atributu typu VARCHAR:
SET WIDTH jmeno 8; -- prikaz "isql"!
SET WIDTH prijmeni 15;
SET WIDTH nazev 15;

-- priklad 5 z minuleho tydne:
-- priklad 5-1:
SELECT idhry,nazev FROM hra JOIN skore ON idhry=hra WHERE hrac=1 ORDER BY nazev; -- s duplicitami (pokud hrac hral nejakou hru vicekrat)
SELECT DISTINCT idhry,nazev FROM hra JOIN skore ON idhry=hra WHERE hrac=1 ORDER BY nazev; -- spravne reseni
-- priklad 5-2:
SELECT * FROM hrac LEFT JOIN skore ON idhrace=hrac; -- pripravny dotaz (neserazeno)
SELECT hrac.* FROM hrac LEFT JOIN skore ON idhrace=hrac WHERE hra IS NULL ORDER BY prijmeni,jmeno,datnaroz;
SELECT hrac.* FROM hrac LEFT JOIN skore ON idhrace=hrac WHERE hra IS NULL ORDER BY 3,2,4; -- funguje i razeni podle poradi sloupcu
SELECT hrac.* FROM hrac LEFT JOIN skore ON idhrace=hrac WHERE hra = NULL ORDER BY prijmeni,jmeno,datnaroz; -- POZOR: vzdy prazdny vysledek (literal NULL a operator = nejdou dohromady!)
-- priklad 5-3:
SELECT hra.* FROM hra LEFT JOIN skore ON idhry=hra WHERE vydana>='2008-01-01' AND hrac IS NULL ORDER BY nazev,verze;
SELECT hra.* FROM hra LEFT JOIN skore ON idhry=hra WHERE vydana>='2008-01-01' AND hrac = NULL ORDER BY nazev,verze; -- nefunkcni "=NULL"!
SELECT hra.* FROM hra LEFT JOIN skore ON idhry=hra AND vydana>='2008-01-01' WHERE hrac IS NULL ORDER BY nazev,verze; -- prehozeni podminky z WHERE do ON nevede ke spravnemu reseni!
-- priklad 5-4:
SELECT hra.*, typ.nazev AS nazev_typu FROM hra JOIN typ ON typ=idt ORDER BY idt,nazev;
-- priklad 5-5:
SELECT skore.*, nazev, jmeno, prijmeni FROM (skore JOIN hra ON hra=idhry) JOIN hrac ON hrac=idhrace ORDER BY den,hrac,poradi; -- projekce by se dala vylepsit...
SELECT hrac, jmeno, prijmeni, hra, nazev, den, poradi, skore FROM (skore JOIN hra ON hra=idhry) JOIN hrac ON hrac=idhrace ORDER BY den,hrac,poradi;
-- priklad 5-6:
SELECT DISTINCT idhrace,jmeno,prijmeni, idhry,nazev FROM hrac LEFT JOIN (skore JOIN hra ON hra=idhry) ON idhrace=hrac ORDER BY prijmeni,jmeno;


-- AGREGACE:
-- prumerne skore her/hry:
SELECT AVG(skore) AS prumerne_skore_hry_3 FROM skore; -- celkove prumerne skore (za vsechny hry dohromady)
SELECT AVG(skore) AS prumerne_skore_hry_3 FROM skore WHERE hra=3; -- prumerne skore za hru s ID=3
SELECT CAST(AVG(skore) AS DECIMAL(5,2)) AS prumerne_skore_hry_3 FROM skore WHERE hra=3; -- snaha o vylepseni (aby prumerne skore pres typ INTEGER nebylo celociselne)
SELECT AVG(skore*1.0) AS prumerne_skore_hry_3 FROM skore WHERE hra=3; -- prumerne skore za hru s ID=3 jako realne cislo (1 desetine misto)
SELECT AVG(skore*1.00) AS prumerne_skore_hry_3 FROM skore WHERE hra=3; -- prumerne skore za hru s ID=3 jako realne cislo (2 desetina mista)
SELECT AVG(skore) AS prumerne_skore_hry_4 FROM skore WHERE hra=4; -- prumerne skore za hru s ID=4
SELECT hra, AVG(skore*1.00) AS prumerne_skore FROM skore GROUP BY hra; -- prumerna skore za kazdou jednu hru
-- prumerne skore hracu, kteri hrali hru s ID=3:
SELECT hrac, AVG(skore*1.00) AS prumerne_skore_hrace FROM skore WHERE hra=3 GROUP BY hrac; -- prum. skore hracu ve hre "Piskvorky"; hodnota je cca 3707
SELECT hrac, AVG(skore*1.00) AS prumerne_skore_hrace FROM skore WHERE hra=3 GROUP BY hrac HAVING AVG(skore)<3707; -- prum. skore podprumernych hracu ve hre "Piskvorky"
SELECT hrac, AVG(skore*1.00) AS prumerne_skore_hrace FROM skore WHERE hra=3 GROUP BY hrac HAVING AVG(skore)>=3707 ORDER BY AVG(skore) DESC; -- prum. skore nadprumernych hracu ve hre "Piskvorky"
SELECT hrac, AVG(skore*1.00) AS prumerne_skore_hrace FROM skore WHERE hra=3 GROUP BY hrac HAVING AVG(skore)>=3707 ORDER BY 2 DESC; -- prum. skore nadprumernych hracu ve hre "Piskvorky", serazeno od nejlepsiho hrace k nejhorsimu
-- ukazka chybne projekce dotazu SELECT:
SELECT hra,AVG(skore) AS prumerne_skore,hrac FROM skore GROUP BY hra; -- neni agregovan atribut "hrac"!
SELECT hra,AVG(skore) AS prumerne_skore,MIN(hrac) FROM skore GROUP BY hra; -- atribut "hrac" je sice agregovan, ale vysledna informace nam moc nerekne
SELECT hra,AVG(skore) AS prumerne_skore,MAX(hrac) FROM skore GROUP BY hra; -- atribut "hrac" je sice agregovan, ale vysledna informace stale jeste nam mnoho nerekne
SELECT hra,AVG(skore) AS prumerne_skore,COUNT(hrac) AS pocet_hrani FROM skore GROUP BY hra; -- uzitecna informace (pocet hrani dane hry)
SELECT hra,AVG(skore) AS prumerne_skore,COUNT(DISTINCT hrac) AS pocet_ruznych_hracu FROM skore GROUP BY hra; -- uzitecna informace (pocet ruznych hracu, kteri danou hru hrali)

-- priklad 6:
-- priklad 6-1:
SELECT COUNT(*) FROM typ;
SELECT COUNT(*) FROM hra;
SELECT COUNT(*) FROM hrac;
SELECT COUNT(*) FROM skore;
-- priklad 6-2:
SELECT hrac FROM skore GROUP BY hrac HAVING COUNT(DISTINCT hra)>=2 ORDER BY 1;
INSERT INTO skore VALUES(2,2,'2023-10-23',1,7032); -- pridame novy zaznam do tabulky SKORE
INSERT INTO skore VALUES(2,2,'2023-10-23',2,7311); -- pridame novy zaznam do tabulky SKORE
INSERT INTO skore VALUES(2,4,'2023-10-23',1,19870); -- pridame novy zaznam do tabulky SKORE
SELECT hrac FROM skore GROUP BY hrac HAVING COUNT(DISTINCT hra)>=2 ORDER BY 1; -- odesleme dotaz znovu (jiny vysledek)
SELECT hrac, COUNT(DISTINCT hra) AS pocet_ruznych_her FROM skore GROUP BY hrac HAVING COUNT(DISTINCT hra)>=2 ORDER BY 1; -- pridame do projekce i pocet ruznych her, abychom to mohli zkontrolovat
-- priklad 6-3, varianta A:
SELECT idhrace,MIN(jmeno) AS jm, MIN(prijmeni) AS prijm, COUNT(DISTINCT hra) AS pocet_ruznych_her FROM hrac JOIN skore ON idhrace=hracGROUP BY idhrace ORDER BY 4 DESC, 3;
-- priklad 6-3, varianta B:
SELECT idhrace,jmeno,prijmeni, COUNT(DISTINCT hra) AS pocet_ruznych_her FROM hrac JOIN skore ON idhrace=hrac GROUP BY idhrace,jmeno,prijmeni ORDER BY 4 DESC, 3; -- "slozitejsi" GROUP BY => jednodussi projekce
-- modifikace prikladu 6-3: hraci, tkeri hrali alespon 2 ruzne hry (vyjdeme z varianty A):
SELECT idhrace,MIN(jmeno) AS jm, MIN(prijmeni) AS prijm, COUNT(DISTINCT hra) AS pocet_ruznych_her FROM hrac JOIN skore ON idhrace=hrac GROUP BY idhrace HAVING COUNT(DISTINCT hra)>=2 ORDER BY 1; -- vypis jen tech hracu, kteri hrali alespon 2 ruzne hry
HELP SET; -- prikaz "isql", chceme si nechat zobrazit cas
SET STAT; -- prikaz "isql"
SELECT idhrace,jmeno,prijmeni, COUNT(DISTINCT hra) AS pocet_ruznych_her FROM hrac JOIN skore ON idhrace=hrac GROUP BY idhrace,jmeno,prijmeni ORDER BY 4 DESC, 3; -- vypis vysledku dotazu a nove take vypis statistik (napr. i cas potrebny pro provedeni prikazu)
-- priklad 6-4:
SELECT idhrace,jmeno,prijmeni, COUNT(DISTINCT hra) AS pocet_ruznych_her FROM hrac LEFT JOIN skore ON idhrace=hrac GROUP BY idhrace,jmeno,prijmeni ORDER BY 4 DESC, 3; -- oproti 6-3 (varianta A) potrebujeme LEFT JOIN
SET STAT; -- prikaz "isql" vypne/zapne vypisovani statistik provedenych prikazu
-- priklad 6-5:
SELECT idhrace,MIN(jmeno) AS jmeno,MIN(prijmeni) AS prijmeni,idhry,MIN(nazev) AS nazev,COUNT(DISTINCT den) AS pocet_dni FROM hra JOIN skore ON idhry=hra JOIN hrac ON hrac=idhrace GROUP BY idhrace,idhry ORDER BY 3,5;
INSERT INTO skore VALUES (1,3,'2023-10-23',1,3901); -- pridame zaznam do tabulky SKORE
INSERT INTO skore VALUES (3,3,'2023-10-23',1,3998); -- pridame zaznam do tabulky SKORE
SELECT idhrace,MIN(jmeno) AS jmeno,MIN(prijmeni) AS prijmeni,idhry,MIN(nazev) AS nazev,COUNT(DISTINCT den) AS pocet_dni FROM hra JOIN skore ON idhry=hra JOIN hrac ON hrac=idhrace GROUP BY idhrace,idhry ORDER BY 3,5; -- znovu pustime dotaz, ale u dvou hracu uy bude vic nez 1 den

-- zbytek prikladu 6 priste --
